{{#if client}}
'use client'
{{/if}}

import * as React from 'react'
{{#if variants}}
import { cva, type VariantProps } from 'class-variance-authority'

const variants = cva('', {
  variants: {
    variant: {
      default: '',
      secondary: '',
    },
  },
  compoundVariants: [],
  defaultVariants: {
    variant: 'default',
  },
})

type T{{ pascalCase func }}Variants = VariantProps<typeof variants>
{{/if}}

type TElementProps = React.ComponentProps<'div'>

{{#if variants}}
type T{{ pascalCase func }}Props = TElementProps & T{{ pascalCase func }}Variants & {
	// 
}
{{else}}
type T{{ pascalCase func }}Props = TElementProps & {
	// 
}
{{/if}}

{{#if forwardRef}}
type TElementRef = React.ElementRef<'div'>
export const {{ pascalCase func }} = React.forwardRef<TElementRef, T{{ pascalCase func }}Props>(function {{ pascalCase func }}({{#if variants }}{className, variant, ...props}{{else}}props{{/if}}, ref) {
	return <div{{#if variants }} className={variants({ className, variant })}{{/if}} data-testid="{{ pascalCase func }}" ref={ref} {...props} />
})
{{else}}
export function {{ pascalCase func }}({{#if variants }}{className, variant, ...props}{{else}}props{{/if}}: T{{ pascalCase func }}Props) {
	return <div{{#if variants }} className={variants({ className, variant })}{{/if}} data-testid="{{ pascalCase func }}" {...props} />
}
{{/if}}
